package com.java.jdbcTemplate;

import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import com.java.jdbcTemplate.exception.NoColumnAnnotationFoundException;
import com.java.jdbcTemplate.exception.NoDefinedGetterException;
import com.java.jdbcTemplate.exception.NoIdAnnotationFoundException;
import com.java.jdbcTemplate.impl.BatchUpdateSetter;
import com.java.jdbcTemplate.impl.ReturnIdPreparedStatementCreator;
import com.java.jdbcTemplate.model.SqlParamsPairs;
import com.java.jdbcTemplate.utils.IdUtils;
import com.java.jdbcTemplate.utils.ModelSqlUtils;

public class JdbcTemplateProxy {

	private Logger LOGGER = LoggerFactory.getLogger(this.getClass());

	private JdbcTemplate jdbcTemplate;

	public JdbcTemplate getJdbcTemplate() {
		return jdbcTemplate;
	}

	public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}

	public <T> T selectOne(String sql, Object[] params, Class<T> clazz) {
		List<T> list = this.<T> selectList(sql, params, clazz);
		if (list.size() == 1) {
			return list.get(0);
		} else if (list.size() > 1) {
			throw new RuntimeException(
					"Expected one result (or null) to be returned by selectOne(), but found: "
							+ list.size());
		} else {
			return null;
		}
	}

	public <T> List<T> selectList(String sql, Object[] params, Class<T> clazz) {
		List<T> list = null;
		if (params == null || params.length == 0) {
			list = jdbcTemplate.query(sql, new BeanPropertyRowMapper<T>(clazz));
		} else {
			list = jdbcTemplate.query(sql, params,
					new BeanPropertyRowMapper<T>(clazz));
		}
		return list;
	}

	// public Map<String, Object> selectMap(String sql, Object[] params){
	// return jdbcTemplate.queryForMap(sql, params);
	// }

	public int count(String sql, Object[] params) {
		int rowCount = 0;
		Map<String, Object> resultMap = null;
		if (params == null || params.length == 0) {
			resultMap = jdbcTemplate.queryForMap(sql);
		} else {
			resultMap = jdbcTemplate.queryForMap(sql, params);
		}
		Iterator<Map.Entry<String, Object>> it = resultMap.entrySet()
				.iterator();
		if (it.hasNext()) {
			Map.Entry<String, Object> entry = it.next();
			rowCount = ((Long) entry.getValue()).intValue();
		}
		return rowCount;
	}

	/**
	 * 获取一个对象 get object by id
	 * 
	 * @param sql
	 * @param params
	 * @param clazz
	 * @return
	 * @throws NoIdAnnotationFoundException
	 * @throws NoColumnAnnotationFoundException
	 * @throws NoDefinedGetterException
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public <T> T get(Class clazz, Object id)
			throws NoIdAnnotationFoundException,
			NoColumnAnnotationFoundException {

		// turn class to sql
		SqlParamsPairs sqlAndParams = ModelSqlUtils.getGetFromObject(clazz, id);

		// query for list
		List<T> list = this.selectList(sqlAndParams.getSql(),
				sqlAndParams.getParams(), clazz);
		if (list.size() > 0) {
			return list.get(0);
		} else {
			return null;
		}
	}

	// ---------------------------- update -----------------------------------//

	/**
	 * 更新某个对象 update object
	 * 
	 * @param po
	 * @throws Exception
	 */
	public void update(Object po) throws Exception {
		SqlParamsPairs sqlAndParams = ModelSqlUtils.getUpdateFromObject(po);

		jdbcTemplate.update(sqlAndParams.getSql(), sqlAndParams.getParams());
	}

	/**
	 * 批量执行更新操作
	 * 
	 * @param sql
	 * @param paramsList
	 */
	public void batchUpdate(String sql, List<Object[]> paramsList) {

		BatchUpdateSetter batchUpdateSetter = new BatchUpdateSetter(paramsList);

		jdbcTemplate.batchUpdate(sql, batchUpdateSetter);
	}

	/**
	 * 保存对象的快捷方法 如果Id标定的是自增会将自增长的主键自动设置回对象 save object
	 * 
	 * @param po
	 * @throws Exception
	 */
	public void save(Object po) throws Exception {
		String autoGeneratedColumnName = IdUtils.getAutoGeneratedId(po);
		if (!"".equals(autoGeneratedColumnName)) {
			// 有自增字段
			int idValue = save(po, autoGeneratedColumnName);
			// 把自增的主键值再设置回去
			IdUtils.setAutoIncreamentIdValue(po, autoGeneratedColumnName,
					idValue);
		} else {
			SqlParamsPairs sqlAndParams = ModelSqlUtils.getInsertFromObject(po);

			jdbcTemplate
					.update(sqlAndParams.getSql(), sqlAndParams.getParams());
		}
	}

	/**
	 * 保存对象并返回自增长主键的快捷方法
	 * 
	 * @param po
	 * @param autoGeneratedColumnName
	 *            自增长的主键的列名 比如 user_id
	 * @throws Exception
	 */
	private int save(Object po, String autoGeneratedColumnName)
			throws Exception {

		SqlParamsPairs sqlAndParams = ModelSqlUtils.getInsertFromObject(po);

		// 动态切换库名
		String sql = sqlAndParams.getSql();

		return insert(sql, sqlAndParams.getParams(), autoGeneratedColumnName);
	}

	// -------------------delete-----------------//
	public void delete(Object po) throws Exception {

		SqlParamsPairs sqlAndParams = ModelSqlUtils.getDeleteFromObject(po);
		// 动态切换库名
		String sql = sqlAndParams.getSql();

		jdbcTemplate.update(sql, sqlAndParams.getParams());
	}

	/**
	 * insert a row with auto increament id
	 * 
	 * @param sql
	 * @param params
	 * @param autoGeneratedColumnName
	 * @return
	 * @throws DataAccessException
	 */
	public int insert(String sql, Object[] params,
			String autoGeneratedColumnName) throws DataAccessException {

		ReturnIdPreparedStatementCreator psc = new ReturnIdPreparedStatementCreator(
				sql, params, autoGeneratedColumnName);
		KeyHolder keyHolder = new GeneratedKeyHolder();
		try {
			jdbcTemplate.update(psc, keyHolder);
		} catch (DataAccessException e) {
			StringBuilder sb = new StringBuilder();
			sb.append("[");
			for (Object p : params) {
				sb.append(p + " | ");
			}
			sb.append("]");
			LOGGER.error("Error SQL: " + sql + " Params: " + sb.toString());
			throw e;
		}

		return keyHolder.getKey().intValue();
	}

}
